{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_SignatureWrongLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle_UpkeeNotNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughEthEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "winAmount",
          "type": "uint256"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPlayers",
      "outputs": [
        {
          "internalType": "address payable[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_myValue",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "getSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x5c9c06c227f99901e14d926b6222d38f317b56677293ebdc7387b21c5f4450de",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1131460",
    "logsBloom": "0x
    "blockHash": "0xd24996a14f236c19f12974a7217d5b0e9e9c94d38399827ab1a21aeb1246f64f",
    "transactionHash": "0x5c9c06c227f99901e14d926b6222d38f317b56677293ebdc7387b21c5f4450de",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1131460",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "5000000000000000",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "1",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "be8b67360d8f3b2f274bee3de7d9aa8e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_SignatureWrongLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle_UpkeeNotNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughEthEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"winAmount\",\"type\":\"uint256\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPlayers\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_myValue\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"getSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the funciton that the chainlink Keeper nodes call the ylook for the \\\"upkeepNeeded\\\" to return true. The following should b etrue in order to return true: 1. Our time interval should have passed 2. The lottery should have at least 1 player and have some Eth 3. Our subscription is funded with LINK 4. The lottery should be in an \\\"open\\\" State\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\\n */\\npragma solidity ^0.8.0;\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./AutomationCompatibleInterface.sol\\\";\\n\",\"keccak256\":\"0xac76a31c20c6d66196247376d113a0f19229569ab8c123989649d50be3333e0a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\r\\n\\r\\nerror Raffle__NotEnoughEthEntered();\\r\\nerror Raffle__TransferFailed();\\r\\nerror Raffle__NotOpen();\\r\\nerror Raffle_UpkeeNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState);\\r\\nerror Raffle_SignatureWrongLength();\\r\\n\\r\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\r\\n    // Type declarations\\r\\n    enum RaffleState {\\r\\n        OPEN,\\r\\n        CALCULATING\\r\\n    }\\r\\n    // State Variables\\r\\n    uint256 private immutable i_entranceFee;\\r\\n    address payable[] private s_players;\\r\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\r\\n    bytes32 private immutable i_gasLane;\\r\\n    uint64 private immutable i_subscriptionId;\\r\\n    uint32 private immutable i_callbackGasLimit;\\r\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\r\\n    uint32 private constant NUM_WORDS = 1;\\r\\n\\r\\n    // Lottery Variables\\r\\n    address private s_recentWinner;\\r\\n    RaffleState private s_raffleState;\\r\\n    uint256 private s_lastTimeStamp;\\r\\n    uint256 private immutable i_interval;\\r\\n\\r\\n    // Events\\r\\n    event RaffleEnter(address indexed player);\\r\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\r\\n    event WinnerPicked(address indexed winner, uint256 indexed winAmount);\\r\\n\\r\\n    constructor(\\r\\n        address vrfCoordinatorV2,\\r\\n        uint256 entranceFee,\\r\\n        bytes32 gasLane,\\r\\n        uint64 subscriptionId,\\r\\n        uint32 callbackGasLimit,\\r\\n        uint256 interval\\r\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\r\\n        i_entranceFee = entranceFee;\\r\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\r\\n        i_gasLane = gasLane;\\r\\n        i_subscriptionId = subscriptionId;\\r\\n        i_callbackGasLimit = callbackGasLimit;\\r\\n        s_raffleState = RaffleState.OPEN;\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        i_interval = interval;\\r\\n    }\\r\\n\\r\\n    function enterRaffle() public payable {\\r\\n        if (msg.value < i_entranceFee) {\\r\\n            revert Raffle__NotEnoughEthEntered();\\r\\n        }\\r\\n        if (s_raffleState != RaffleState.OPEN) {\\r\\n            revert Raffle__NotOpen();\\r\\n        }\\r\\n        s_players.push(payable(msg.sender));\\r\\n        emit RaffleEnter(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This is the funciton that the chainlink Keeper nodes call\\r\\n     * the ylook for the \\\"upkeepNeeded\\\" to return true.\\r\\n     * The following should b etrue in order to return true:\\r\\n     * 1. Our time interval should have passed\\r\\n     * 2. The lottery should have at least 1 player and have some Eth\\r\\n     * 3. Our subscription is funded with LINK\\r\\n     * 4. The lottery should be in an \\\"open\\\" State\\r\\n     */\\r\\n    function checkUpkeep(\\r\\n        bytes memory /* checkData */\\r\\n    ) public override returns (bool upkeepNeeded, bytes memory /*performData*/) {\\r\\n        bool isOpen = (RaffleState.OPEN == s_raffleState);\\r\\n        bool timePassed = (block.timestamp - s_lastTimeStamp) > i_interval;\\r\\n        bool hasPlayers = (s_players.length > 0);\\r\\n        bool hasBalance = address(this).balance > 0;\\r\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\r\\n    }\\r\\n\\r\\n    function performUpkeep(bytes calldata /*performData*/) external override {\\r\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\r\\n        if (!upkeepNeeded) {\\r\\n            revert Raffle_UpkeeNotNeeded(address(this).balance, s_players.length, uint256(s_raffleState));\\r\\n        }\\r\\n        // Will revert if subscription is not set and funded.\\r\\n        s_raffleState = RaffleState.CALCULATING;\\r\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\r\\n            i_gasLane, // gasLane\\r\\n            i_subscriptionId,\\r\\n            REQUEST_CONFIRMATIONS,\\r\\n            i_callbackGasLimit,\\r\\n            NUM_WORDS\\r\\n        );\\r\\n        emit RequestedRaffleWinner(requestId);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(uint256 /*requestId*/, uint256[] memory randomWords) internal override {\\r\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\r\\n        address payable recentWinner = s_players[indexOfWinner];\\r\\n        s_recentWinner = recentWinner;\\r\\n        s_raffleState = RaffleState.OPEN;\\r\\n        s_players = new address payable[](0);\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        uint256 winBalance = address(this).balance;\\r\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\r\\n        if (!success) {\\r\\n            revert Raffle__TransferFailed();\\r\\n        }\\r\\n        emit WinnerPicked(recentWinner, winBalance);\\r\\n    }\\r\\n\\r\\n    // Check signed Message\\r\\n    function getSigner(string memory _myValue, bytes memory _signature) public view returns (address) {\\r\\n        // EIP721 domain type\\r\\n        string memory name = \\\"Ethereum Lottery\\\";\\r\\n        string memory version = \\\"1\\\";\\r\\n        uint256 chainId = block.chainid;\\r\\n        address verifyingContract = address(this);\\r\\n\\r\\n        // stringified types\\r\\n        string\\r\\n            memory EIP712_DOMAIN_TYPE = \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\";\\r\\n        string memory MESSAGE_TYPE = \\\"Message(string myValue)\\\";\\r\\n\\r\\n        // hash to prevent signature collision\\r\\n        bytes32 DOMAIN_SEPARATOR = keccak256(\\r\\n            abi.encode(\\r\\n                keccak256(abi.encodePacked(EIP712_DOMAIN_TYPE)),\\r\\n                keccak256(abi.encodePacked(name)),\\r\\n                keccak256(abi.encodePacked(version)),\\r\\n                chainId,\\r\\n                verifyingContract\\r\\n            )\\r\\n        );\\r\\n\\r\\n        // hash typed data\\r\\n        bytes32 hash = keccak256(\\r\\n            abi.encodePacked(\\r\\n                \\\"\\\\x19\\\\x01\\\", // backslash is needed to escape the character\\r\\n                DOMAIN_SEPARATOR,\\r\\n                keccak256(\\r\\n                    abi.encodePacked(keccak256(abi.encodePacked(MESSAGE_TYPE)), keccak256(abi.encodePacked(_myValue)))\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n\\r\\n        // split signature\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n        uint8 v;\\r\\n        if (_signature.length != 65) {\\r\\n            return address(0);\\r\\n        }\\r\\n        assembly {\\r\\n            r := mload(add(_signature, 32))\\r\\n            s := mload(add(_signature, 64))\\r\\n            v := byte(0, mload(add(_signature, 96)))\\r\\n        }\\r\\n        if (v < 27) {\\r\\n            v += 27;\\r\\n        }\\r\\n        if (v != 27 && v != 28) {\\r\\n            return address(0);\\r\\n        } else {\\r\\n            // verify\\r\\n            return ecrecover(hash, v, r, s);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Check signed Message\\r\\n    function verify(bytes memory _signature, address _signer, string memory _message) public pure returns (bool) {\\r\\n        bytes32 messageHash = getMessageHash(_message);\\r\\n        bytes32 ethSignesMessageHash = getEthSignedMessageHash(messageHash);\\r\\n\\r\\n        address recoveredSigner = recoverSigner(ethSignesMessageHash, _signature);\\r\\n        return recoveredSigner == _signer;\\r\\n    }\\r\\n\\r\\n    function recoverSigner(bytes32 _ethSignedMesssageHash, bytes memory _signature) internal pure returns (address) {\\r\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\\r\\n\\r\\n        return ecrecover(_ethSignedMesssageHash, v, r, s);\\r\\n    }\\r\\n\\r\\n    function splitSignature(bytes memory _signature) internal pure returns (bytes32 r, bytes32 s, uint8 v) {\\r\\n        if (_signature.length != 65) {\\r\\n            revert Raffle_SignatureWrongLength();\\r\\n        }\\r\\n\\r\\n        assembly {\\r\\n            r := mload(add(_signature, 32))\\r\\n            s := mload(add(_signature, 64))\\r\\n            v := byte(0, mload(add(_signature, 96)))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getMessageHash(string memory _message) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(_message));\\r\\n    }\\r\\n\\r\\n    function getEthSignedMessageHash(bytes32 _messageHash) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _messageHash));\\r\\n    }\\r\\n\\r\\n    // Get Variables\\r\\n\\r\\n    function getEntranceFee() public view returns (uint256) {\\r\\n        return i_entranceFee;\\r\\n    }\\r\\n\\r\\n    function getPlayer(uint256 index) public view returns (address) {\\r\\n        return s_players[index];\\r\\n    }\\r\\n\\r\\n    function getRecentWinner() public view returns (address) {\\r\\n        return s_recentWinner;\\r\\n    }\\r\\n\\r\\n    function getRaffleState() public view returns (RaffleState) {\\r\\n        return s_raffleState;\\r\\n    }\\r\\n\\r\\n    function getNumWords() public pure returns (uint256) {\\r\\n        return NUM_WORDS;\\r\\n    }\\r\\n\\r\\n    function getNumberOfPlayers() public view returns (uint256) {\\r\\n        return s_players.length;\\r\\n    }\\r\\n\\r\\n    function getLatestTimeStamp() public view returns (uint256) {\\r\\n        return s_lastTimeStamp;\\r\\n    }\\r\\n\\r\\n    function getRequestConfirmations() public pure returns (uint256) {\\r\\n        return REQUEST_CONFIRMATIONS;\\r\\n    }\\r\\n\\r\\n    function getInterval() public view returns (uint256) {\\r\\n        return i_interval;\\r\\n    }\\r\\n\\r\\n    function getAllPlayers() public view returns (address payable[] memory) {\\r\\n        return s_players;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe93d620b570743f4918abb1cce955c9a29b88cf665486e536bd4075305b39b27\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61016060405234801561001157600080fd5b5060405161147d38038061147d83398101604081905261003091610084565b6001600160a01b0395909516608081905260a09490945260c09390935260e0919091526001600160401b03166101005263ffffffff16610120526001805460ff60a01b19169055426002556101405261010f565b60008060008060008060c0878903121561009d57600080fd5b86516001600160a01b03811681146100b457600080fd5b6020880151604089015160608a015192985090965094506001600160401b03811681146100e057600080fd5b608088015190935063ffffffff811681146100fa57600080fd5b8092505060a087015190509295509295509295565b60805160a05160c05160e0516101005161012051610140516112ff61017e6000396000818161028701526106e10152600061058f0152600061055801526000610532015260006105ce01526000818161010701526103b101526000818161032d015261036f01526112ff6000f3fe6080604052600436106100f35760003560e01c806353a2c19a1161008a578063a8e547fb11610059578063a8e547fb146102ab578063e55ae4e8146102cb578063efa1c482146102eb578063fd6673f51461030d57600080fd5b806353a2c19a146102225780635f1b0fd8146102365780636e04ff0d1461024a57806391ad27b41461027857600080fd5b8063320229eb116100c6578063320229eb1461018b5780634585e33b146101a0578063473f1ddc146101c05780634f480a2b146101f257600080fd5b806309bc33a7146100f8578063115cbaf51461013a5780631fe543e3146101615780632cfcc53914610183575b600080fd5b34801561010457600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040519081526020015b60405180910390f35b34801561014657600080fd5b50600154600160a01b900460ff166040516101319190610dda565b34801561016d57600080fd5b5061018161017c366004610e49565b610322565b005b6101816103af565b34801561019757600080fd5b50600254610127565b3480156101ac57600080fd5b506101816101bb366004610efb565b61049a565b3480156101cc57600080fd5b506001546001600160a01b03165b6040516001600160a01b039091168152602001610131565b3480156101fe57600080fd5b5061021261020d366004610fdd565b61066f565b6040519015158152602001610131565b34801561022e57600080fd5b506001610127565b34801561024257600080fd5b506003610127565b34801561025657600080fd5b5061026a610265366004611061565b6106b1565b6040516101319291906110c2565b34801561028457600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610127565b3480156102b757600080fd5b506101da6102c63660046110fe565b610741565b3480156102d757600080fd5b506101da6102e6366004611162565b610a4a565b3480156102f757600080fd5b50610300610a79565b604051610131919061117b565b34801561031957600080fd5b50600054610127565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103a15760405163073e64fd60e21b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526044015b60405180910390fd5b6103ab8282610adb565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156103f05760405163066d781f60e01b815260040160405180910390fd5b600060018054600160a01b900460ff169081111561041057610410610dc4565b1461042e5760405163050955c760e21b815260040160405180910390fd5b600080546001810182558180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319163390811790915560405190917f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d491a2565b60006104b4604051806020016040528060008152506106b1565b5090508061050e5747600080549050600160149054906101000a900460ff1660018111156104e4576104e4610dc4565b60405163275e187b60e21b8152600481019390935260248301919091526044820152606401610398565b60018054600160a01b60ff60a01b199091161781556040516305d3b1d360e41b81527f000000000000000000000000000000000000000000000000000000000000000060048201527f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff166024820152600360448201527f000000000000000000000000000000000000000000000000000000000000000063ffffffff16606482015260848101919091526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635d3b1d309060a4016020604051808303816000875af1158015610617573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063b91906111c8565b60405190915081907fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b90600090a250505050565b60008061067b83610c1b565b9050600061068882610c4b565b905060006106968288610c86565b6001600160a01b039081169087161493505050509392505050565b600060606000600160149054906101000a900460ff1660018111156106d8576106d8610dc4565b600014905060007f00000000000000000000000000000000000000000000000000000000000000006002544261070e91906111f7565b6000549110915015154715158380156107245750825b801561072d5750815b80156107365750805b955050505050915091565b604080518082018252601081526f457468657265756d204c6f747465727960801b6020808301919091528251808401845260018152603160f81b818301528351608081019094526052808552600094919246923092879261127890830139905060006040518060400160405280601781526020017f4d65737361676528737472696e67206d7956616c75652900000000000000000081525090506000826040516020016107ee919061120a565b6040516020818303038152906040528051906020012087604051602001610815919061120a565b604051602081830303815290604052805190602001208760405160200161083c919061120a565b60408051601f198184030181528282528051602091820120908301949094528101919091526060810191909152608081018690526001600160a01b03851660a082015260c001604051602081830303815290604052805190602001209050600081836040516020016108ae919061120a565b604051602081830303815290604052805190602001208c6040516020016108d5919061120a565b60405160208183030381529060405280519060200120604051602001610905929190918252602082015260400190565b6040516020818303038152906040528051906020012060405160200161094292919061190160f01b81526002810192909252602282015260420190565b60405160208183030381529060405280519060200120905060008060008c5160411461097c5760009b505050505050505050505050610a44565b50505060208a015160408b015160608c015160001a601b8110156109a8576109a5601b82611226565b90505b8060ff16601b141580156109c057508060ff16601c14155b156109d95760009b505050505050505050505050610a44565b60408051600081526020810180835286905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015610a2c573d6000803e3d6000fd5b505050602060405103519b5050505050505050505050505b92915050565b6000808281548110610a5e57610a5e61123f565b6000918252602090912001546001600160a01b031692915050565b60606000805480602002602001604051908101604052809291908181526020018280548015610ad157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ab3575b5050505050905090565b60008054825183908390610af157610af161123f565b6020026020010151610b039190611255565b90506000808281548110610b1957610b1961123f565b600091825260208083209190910154600180546001600160a81b0319166001600160a01b03909216918217905560408051848152928301908190529151909350610b64929190610d4a565b504260025560405147906000906001600160a01b0384169047908381818185875af1925050503d8060008114610bb6576040519150601f19603f3d011682016040523d82523d6000602084013e610bbb565b606091505b5050905080610bdd5760405163a1d04b3960e01b815260040160405180910390fd5b60405182906001600160a01b038516907f64791dbae5677392ba76761a5273633cec8f1d9d8cfe808da7bac6ef16a880be90600090a3505050505050565b600081604051602001610c2e919061120a565b604051602081830303815290604052805190602001209050919050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01610c2e565b600080600080610c9585610d05565b6040805160008152602081018083528b905260ff8316918101919091526060810184905260808101839052929550909350915060019060a0016020604051602081039080840390855afa158015610cf0573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b60008060008351604114610d2c576040516311ed343b60e31b815260040160405180910390fd5b50505060208101516040820151606090920151909260009190911a90565b828054828255906000526020600020908101928215610d9f579160200282015b82811115610d9f57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610d6a565b50610dab929150610daf565b5090565b5b80821115610dab5760008155600101610db0565b634e487b7160e01b600052602160045260246000fd5b6020810160028310610dfc57634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610e4157610e41610e02565b604052919050565b60008060408385031215610e5c57600080fd5b8235915060208084013567ffffffffffffffff80821115610e7c57600080fd5b818601915086601f830112610e9057600080fd5b813581811115610ea257610ea2610e02565b8060051b9150610eb3848301610e18565b8181529183018401918481019089841115610ecd57600080fd5b938501935b83851015610eeb57843582529385019390850190610ed2565b8096505050505050509250929050565b60008060208385031215610f0e57600080fd5b823567ffffffffffffffff80821115610f2657600080fd5b818501915085601f830112610f3a57600080fd5b813581811115610f4957600080fd5b866020828501011115610f5b57600080fd5b60209290920196919550909350505050565b600082601f830112610f7e57600080fd5b813567ffffffffffffffff811115610f9857610f98610e02565b610fab601f8201601f1916602001610e18565b818152846020838601011115610fc057600080fd5b816020850160208301376000918101602001919091529392505050565b600080600060608486031215610ff257600080fd5b833567ffffffffffffffff8082111561100a57600080fd5b61101687838801610f6d565b9450602086013591506001600160a01b038216821461103457600080fd5b9092506040850135908082111561104a57600080fd5b5061105786828701610f6d565b9150509250925092565b60006020828403121561107357600080fd5b813567ffffffffffffffff81111561108a57600080fd5b61109684828501610f6d565b949350505050565b60005b838110156110b95781810151838201526020016110a1565b50506000910152565b821515815260406020820152600082518060408401526110e981606085016020870161109e565b601f01601f1916919091016060019392505050565b6000806040838503121561111157600080fd5b823567ffffffffffffffff8082111561112957600080fd5b61113586838701610f6d565b9350602085013591508082111561114b57600080fd5b5061115885828601610f6d565b9150509250929050565b60006020828403121561117457600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156111bc5783516001600160a01b031683529284019291840191600101611197565b50909695505050505050565b6000602082840312156111da57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610a4457610a446111e1565b6000825161121c81846020870161109e565b9190910192915050565b60ff8181168382160190811115610a4457610a446111e1565b634e487b7160e01b600052603260045260246000fd5b60008261127257634e487b7160e01b600052601260045260246000fd5b50069056fe454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a26469706673582212207357869fd85c1505a3d66d8a19fbbcf7b2d03e13dfbbb53689e0a1fdd972bd4c64736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c806353a2c19a1161008a578063a8e547fb11610059578063a8e547fb146102ab578063e55ae4e8146102cb578063efa1c482146102eb578063fd6673f51461030d57600080fd5b806353a2c19a146102225780635f1b0fd8146102365780636e04ff0d1461024a57806391ad27b41461027857600080fd5b8063320229eb116100c6578063320229eb1461018b5780634585e33b146101a0578063473f1ddc146101c05780634f480a2b146101f257600080fd5b806309bc33a7146100f8578063115cbaf51461013a5780631fe543e3146101615780632cfcc53914610183575b600080fd5b34801561010457600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040519081526020015b60405180910390f35b34801561014657600080fd5b50600154600160a01b900460ff166040516101319190610dda565b34801561016d57600080fd5b5061018161017c366004610e49565b610322565b005b6101816103af565b34801561019757600080fd5b50600254610127565b3480156101ac57600080fd5b506101816101bb366004610efb565b61049a565b3480156101cc57600080fd5b506001546001600160a01b03165b6040516001600160a01b039091168152602001610131565b3480156101fe57600080fd5b5061021261020d366004610fdd565b61066f565b6040519015158152602001610131565b34801561022e57600080fd5b506001610127565b34801561024257600080fd5b506003610127565b34801561025657600080fd5b5061026a610265366004611061565b6106b1565b6040516101319291906110c2565b34801561028457600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610127565b3480156102b757600080fd5b506101da6102c63660046110fe565b610741565b3480156102d757600080fd5b506101da6102e6366004611162565b610a4a565b3480156102f757600080fd5b50610300610a79565b604051610131919061117b565b34801561031957600080fd5b50600054610127565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103a15760405163073e64fd60e21b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526044015b60405180910390fd5b6103ab8282610adb565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156103f05760405163066d781f60e01b815260040160405180910390fd5b600060018054600160a01b900460ff169081111561041057610410610dc4565b1461042e5760405163050955c760e21b815260040160405180910390fd5b600080546001810182558180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319163390811790915560405190917f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d491a2565b60006104b4604051806020016040528060008152506106b1565b5090508061050e5747600080549050600160149054906101000a900460ff1660018111156104e4576104e4610dc4565b60405163275e187b60e21b8152600481019390935260248301919091526044820152606401610398565b60018054600160a01b60ff60a01b199091161781556040516305d3b1d360e41b81527f000000000000000000000000000000000000000000000000000000000000000060048201527f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff166024820152600360448201527f000000000000000000000000000000000000000000000000000000000000000063ffffffff16606482015260848101919091526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635d3b1d309060a4016020604051808303816000875af1158015610617573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063b91906111c8565b60405190915081907fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b90600090a250505050565b60008061067b83610c1b565b9050600061068882610c4b565b905060006106968288610c86565b6001600160a01b039081169087161493505050509392505050565b600060606000600160149054906101000a900460ff1660018111156106d8576106d8610dc4565b600014905060007f00000000000000000000000000000000000000000000000000000000000000006002544261070e91906111f7565b6000549110915015154715158380156107245750825b801561072d5750815b80156107365750805b955050505050915091565b604080518082018252601081526f457468657265756d204c6f747465727960801b6020808301919091528251808401845260018152603160f81b818301528351608081019094526052808552600094919246923092879261127890830139905060006040518060400160405280601781526020017f4d65737361676528737472696e67206d7956616c75652900000000000000000081525090506000826040516020016107ee919061120a565b6040516020818303038152906040528051906020012087604051602001610815919061120a565b604051602081830303815290604052805190602001208760405160200161083c919061120a565b60408051601f198184030181528282528051602091820120908301949094528101919091526060810191909152608081018690526001600160a01b03851660a082015260c001604051602081830303815290604052805190602001209050600081836040516020016108ae919061120a565b604051602081830303815290604052805190602001208c6040516020016108d5919061120a565b60405160208183030381529060405280519060200120604051602001610905929190918252602082015260400190565b6040516020818303038152906040528051906020012060405160200161094292919061190160f01b81526002810192909252602282015260420190565b60405160208183030381529060405280519060200120905060008060008c5160411461097c5760009b505050505050505050505050610a44565b50505060208a015160408b015160608c015160001a601b8110156109a8576109a5601b82611226565b90505b8060ff16601b141580156109c057508060ff16601c14155b156109d95760009b505050505050505050505050610a44565b60408051600081526020810180835286905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015610a2c573d6000803e3d6000fd5b505050602060405103519b5050505050505050505050505b92915050565b6000808281548110610a5e57610a5e61123f565b6000918252602090912001546001600160a01b031692915050565b60606000805480602002602001604051908101604052809291908181526020018280548015610ad157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ab3575b5050505050905090565b60008054825183908390610af157610af161123f565b6020026020010151610b039190611255565b90506000808281548110610b1957610b1961123f565b600091825260208083209190910154600180546001600160a81b0319166001600160a01b03909216918217905560408051848152928301908190529151909350610b64929190610d4a565b504260025560405147906000906001600160a01b0384169047908381818185875af1925050503d8060008114610bb6576040519150601f19603f3d011682016040523d82523d6000602084013e610bbb565b606091505b5050905080610bdd5760405163a1d04b3960e01b815260040160405180910390fd5b60405182906001600160a01b038516907f64791dbae5677392ba76761a5273633cec8f1d9d8cfe808da7bac6ef16a880be90600090a3505050505050565b600081604051602001610c2e919061120a565b604051602081830303815290604052805190602001209050919050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01610c2e565b600080600080610c9585610d05565b6040805160008152602081018083528b905260ff8316918101919091526060810184905260808101839052929550909350915060019060a0016020604051602081039080840390855afa158015610cf0573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b60008060008351604114610d2c576040516311ed343b60e31b815260040160405180910390fd5b50505060208101516040820151606090920151909260009190911a90565b828054828255906000526020600020908101928215610d9f579160200282015b82811115610d9f57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610d6a565b50610dab929150610daf565b5090565b5b80821115610dab5760008155600101610db0565b634e487b7160e01b600052602160045260246000fd5b6020810160028310610dfc57634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610e4157610e41610e02565b604052919050565b60008060408385031215610e5c57600080fd5b8235915060208084013567ffffffffffffffff80821115610e7c57600080fd5b818601915086601f830112610e9057600080fd5b813581811115610ea257610ea2610e02565b8060051b9150610eb3848301610e18565b8181529183018401918481019089841115610ecd57600080fd5b938501935b83851015610eeb57843582529385019390850190610ed2565b8096505050505050509250929050565b60008060208385031215610f0e57600080fd5b823567ffffffffffffffff80821115610f2657600080fd5b818501915085601f830112610f3a57600080fd5b813581811115610f4957600080fd5b866020828501011115610f5b57600080fd5b60209290920196919550909350505050565b600082601f830112610f7e57600080fd5b813567ffffffffffffffff811115610f9857610f98610e02565b610fab601f8201601f1916602001610e18565b818152846020838601011115610fc057600080fd5b816020850160208301376000918101602001919091529392505050565b600080600060608486031215610ff257600080fd5b833567ffffffffffffffff8082111561100a57600080fd5b61101687838801610f6d565b9450602086013591506001600160a01b038216821461103457600080fd5b9092506040850135908082111561104a57600080fd5b5061105786828701610f6d565b9150509250925092565b60006020828403121561107357600080fd5b813567ffffffffffffffff81111561108a57600080fd5b61109684828501610f6d565b949350505050565b60005b838110156110b95781810151838201526020016110a1565b50506000910152565b821515815260406020820152600082518060408401526110e981606085016020870161109e565b601f01601f1916919091016060019392505050565b6000806040838503121561111157600080fd5b823567ffffffffffffffff8082111561112957600080fd5b61113586838701610f6d565b9350602085013591508082111561114b57600080fd5b5061115885828601610f6d565b9150509250929050565b60006020828403121561117457600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156111bc5783516001600160a01b031683529284019291840191600101611197565b50909695505050505050565b6000602082840312156111da57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610a4457610a446111e1565b6000825161121c81846020870161109e565b9190910192915050565b60ff8181168382160190811115610a4457610a446111e1565b634e487b7160e01b600052603260045260246000fd5b60008261127257634e487b7160e01b600052601260045260246000fd5b50069056fe454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a26469706673582212207357869fd85c1505a3d66d8a19fbbcf7b2d03e13dfbbb53689e0a1fdd972bd4c64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the funciton that the chainlink Keeper nodes call the ylook for the \"upkeepNeeded\" to return true. The following should b etrue in order to return true: 1. Our time interval should have passed 2. The lottery should have at least 1 player and have some Eth 3. Our subscription is funded with LINK 4. The lottery should be in an \"open\" State"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 209,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 226,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 229,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)204"
      },
      {
        "astId": 231,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)204": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
