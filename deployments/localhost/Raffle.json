{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_SignatureWrongLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle_UpkeeNotNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughEthEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "winAmount",
          "type": "uint256"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPlayers",
      "outputs": [
        {
          "internalType": "address payable[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x93d88d733d704dec62e4b38f208174b48f5c0326ca6e6f6360c07a499cf45206",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "915671",
    "logsBloom": "0x
    "blockHash": "0x1b0c7c331493d02ded852bc990d858c1f7c8d8b52282b0acec8ef844279f98db",
    "transactionHash": "0x93d88d733d704dec62e4b38f208174b48f5c0326ca6e6f6360c07a499cf45206",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "915671",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "5000000000000000",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "1",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "fd6434d0efa53d5dfeb7224282908fa0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_SignatureWrongLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle_UpkeeNotNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughEthEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"winAmount\",\"type\":\"uint256\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPlayers\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the funciton that the chainlink Keeper nodes call the ylook for the \\\"upkeepNeeded\\\" to return true. The following should b etrue in order to return true: 1. Our time interval should have passed 2. The lottery should have at least 1 player and have some Eth 3. Our subscription is funded with LINK 4. The lottery should be in an \\\"open\\\" State\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\\n */\\npragma solidity ^0.8.0;\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./AutomationCompatibleInterface.sol\\\";\\n\",\"keccak256\":\"0xac76a31c20c6d66196247376d113a0f19229569ab8c123989649d50be3333e0a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nerror Raffle__NotEnoughEthEntered();\\nerror Raffle__TransferFailed();\\nerror Raffle__NotOpen();\\nerror Raffle_UpkeeNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState);\\nerror Raffle_SignatureWrongLength();\\n\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    // Type declarations\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n    }\\n    // State Variables\\n    uint256 private immutable i_entranceFee;\\n    address payable[] private s_players;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    // Lottery Variables\\n    address private s_recentWinner;\\n    RaffleState private s_raffleState;\\n    uint256 private s_lastTimeStamp;\\n    uint256 private immutable i_interval;\\n\\n    // Events\\n    event RaffleEnter(address indexed player);\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n    event WinnerPicked(address indexed winner, uint256 indexed winAmount);\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint256 entranceFee,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_raffleState = RaffleState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_interval = interval;\\n    }\\n\\n    function enterRaffle() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert Raffle__NotEnoughEthEntered();\\n        }\\n        if (s_raffleState != RaffleState.OPEN) {\\n            revert Raffle__NotOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    /**\\n     * @dev This is the funciton that the chainlink Keeper nodes call\\n     * the ylook for the \\\"upkeepNeeded\\\" to return true.\\n     * The following should b etrue in order to return true:\\n     * 1. Our time interval should have passed\\n     * 2. The lottery should have at least 1 player and have some Eth\\n     * 3. Our subscription is funded with LINK\\n     * 4. The lottery should be in an \\\"open\\\" State\\n     */\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    ) public override returns (bool upkeepNeeded, bytes memory /*performData*/) {\\n        bool isOpen = (RaffleState.OPEN == s_raffleState);\\n        bool timePassed = (block.timestamp - s_lastTimeStamp) > i_interval;\\n        bool hasPlayers = (s_players.length > 0);\\n        bool hasBalance = address(this).balance > 0;\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\n    }\\n\\n    function performUpkeep(bytes calldata /*performData*/) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Raffle_UpkeeNotNeeded(address(this).balance, s_players.length, uint256(s_raffleState));\\n        }\\n        // Will revert if subscription is not set and funded.\\n        s_raffleState = RaffleState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane, // gasLane\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(uint256 /*requestId*/, uint256[] memory randomWords) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        s_raffleState = RaffleState.OPEN;\\n        s_players = new address payable[](0);\\n        s_lastTimeStamp = block.timestamp;\\n        uint256 winBalance = address(this).balance;\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Raffle__TransferFailed();\\n        }\\n        emit WinnerPicked(recentWinner, winBalance);\\n    }\\n\\n    // Check signed Message\\n    function verify(bytes memory _signature, address _signer, string memory _message) public pure returns (bool) {\\n        bytes32 messageHash = getMessageHash(_message);\\n        bytes32 ethSignesMessageHash = getEthSignedMessageHash(messageHash);\\n\\n        address recoveredSigner = recoverSigner(ethSignesMessageHash, _signature);\\n        return recoveredSigner == _signer;\\n    }\\n\\n    function recoverSigner(bytes32 _ethSignedMesssageHash, bytes memory _signature) internal pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\\n\\n        return ecrecover(_ethSignedMesssageHash, v, r, s);\\n    }\\n\\n    function splitSignature(bytes memory _signature) internal pure returns (bytes32 r, bytes32 s, uint8 v) {\\n        if (_signature.length != 65) {\\n            revert Raffle_SignatureWrongLength();\\n        }\\n\\n        assembly {\\n            r := mload(add(_signature, 32))\\n            s := mload(add(_signature, 64))\\n            v := byte(0, mload(add(_signature, 96)))\\n        }\\n    }\\n\\n    function getMessageHash(string memory _message) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_message));\\n    }\\n\\n    function getEthSignedMessageHash(bytes32 _messageHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _messageHash));\\n    }\\n\\n    // Get Variables\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getLatestTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function getAllPlayers() public view returns (address payable[] memory) {\\n        return s_players;\\n    }\\n}\\n\",\"keccak256\":\"0x7b2f3ae378e4d73ce7443a6de33f4c30676c2582146bfcabf3d8795296fe0953\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61016060405234801561001157600080fd5b5060405161109538038061109583398101604081905261003091610084565b6001600160a01b0395909516608081905260a09490945260c09390935260e0919091526001600160401b03166101005263ffffffff16610120526001805460ff60a01b19169055426002556101405261010f565b60008060008060008060c0878903121561009d57600080fd5b86516001600160a01b03811681146100b457600080fd5b6020880151604089015160608a015192985090965094506001600160401b03811681146100e057600080fd5b608088015190935063ffffffff811681146100fa57600080fd5b8092505060a087015190509295509295509295565b60805160a05160c05160e051610100516101205161014051610f1861017d6000396000818161027c01526106b6015260006105640152600061052d01526000610507015260006105a301526000818160fc015261038601526000818161030201526103440152610f186000f3fe6080604052600436106100e85760003560e01c80634f480a2b1161008a57806391ad27b41161005957806391ad27b41461026d578063e55ae4e8146102a0578063efa1c482146102c0578063fd6673f5146102e257600080fd5b80634f480a2b146101e757806353a2c19a146102175780635f1b0fd81461022b5780636e04ff0d1461023f57600080fd5b80632cfcc539116100c65780632cfcc53914610178578063320229eb146101805780634585e33b14610195578063473f1ddc146101b557600080fd5b806309bc33a7146100ed578063115cbaf51461012f5780631fe543e314610156575b600080fd5b3480156100f957600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040519081526020015b60405180910390f35b34801561013b57600080fd5b50600154600160a01b900460ff166040516101269190610aa7565b34801561016257600080fd5b50610176610171366004610b16565b6102f7565b005b610176610384565b34801561018c57600080fd5b5060025461011c565b3480156101a157600080fd5b506101766101b0366004610bc8565b61046f565b3480156101c157600080fd5b506001546001600160a01b03165b6040516001600160a01b039091168152602001610126565b3480156101f357600080fd5b50610207610202366004610cb9565b610644565b6040519015158152602001610126565b34801561022357600080fd5b50600161011c565b34801561023757600080fd5b50600361011c565b34801561024b57600080fd5b5061025f61025a366004610d51565b610686565b604051610126929190610db2565b34801561027957600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061011c565b3480156102ac57600080fd5b506101cf6102bb366004610dee565b610716565b3480156102cc57600080fd5b506102d5610745565b6040516101269190610e07565b3480156102ee57600080fd5b5060005461011c565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103765760405163073e64fd60e21b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526044015b60405180910390fd5b61038082826107a7565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156103c55760405163066d781f60e01b815260040160405180910390fd5b600060018054600160a01b900460ff16908111156103e5576103e5610a91565b146104035760405163050955c760e21b815260040160405180910390fd5b600080546001810182558180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319163390811790915560405190917f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d491a2565b600061048960405180602001604052806000815250610686565b509050806104e35747600080549050600160149054906101000a900460ff1660018111156104b9576104b9610a91565b60405163275e187b60e21b815260048101939093526024830191909152604482015260640161036d565b60018054600160a01b60ff60a01b199091161781556040516305d3b1d360e41b81527f000000000000000000000000000000000000000000000000000000000000000060048201527f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff166024820152600360448201527f000000000000000000000000000000000000000000000000000000000000000063ffffffff16606482015260848101919091526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635d3b1d309060a4016020604051808303816000875af11580156105ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106109190610e54565b60405190915081907fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b90600090a250505050565b600080610650836108e7565b9050600061065d82610917565b9050600061066b8288610952565b6001600160a01b039081169087161493505050509392505050565b600060606000600160149054906101000a900460ff1660018111156106ad576106ad610a91565b600014905060007f0000000000000000000000000000000000000000000000000000000000000000600254426106e39190610e6d565b6000549110915015154715158380156106f95750825b80156107025750815b801561070b5750805b955050505050915091565b600080828154811061072a5761072a610e8e565b6000918252602090912001546001600160a01b031692915050565b6060600080548060200260200160405190810160405280929190818152602001828054801561079d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161077f575b5050505050905090565b600080548251839083906107bd576107bd610e8e565b60200260200101516107cf9190610ea4565b905060008082815481106107e5576107e5610e8e565b600091825260208083209190910154600180546001600160a81b0319166001600160a01b03909216918217905560408051848152928301908190529151909350610830929190610a17565b504260025560405147906000906001600160a01b0384169047908381818185875af1925050503d8060008114610882576040519150601f19603f3d011682016040523d82523d6000602084013e610887565b606091505b50509050806108a95760405163a1d04b3960e01b815260040160405180910390fd5b60405182906001600160a01b038516907f64791dbae5677392ba76761a5273633cec8f1d9d8cfe808da7bac6ef16a880be90600090a3505050505050565b6000816040516020016108fa9190610ec6565b604051602081830303815290604052805190602001209050919050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c016108fa565b600080600080610961856109d2565b6040805160008152602081018083528b905260ff8316918101919091526060810184905260808101839052929550909350915060019060a0016020604051602081039080840390855afa1580156109bc573d6000803e3d6000fd5b5050506020604051035193505050505b92915050565b600080600083516041146109f9576040516311ed343b60e31b815260040160405180910390fd5b50505060208101516040820151606090920151909260009190911a90565b828054828255906000526020600020908101928215610a6c579160200282015b82811115610a6c57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610a37565b50610a78929150610a7c565b5090565b5b80821115610a785760008155600101610a7d565b634e487b7160e01b600052602160045260246000fd5b6020810160028310610ac957634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610b0e57610b0e610acf565b604052919050565b60008060408385031215610b2957600080fd5b8235915060208084013567ffffffffffffffff80821115610b4957600080fd5b818601915086601f830112610b5d57600080fd5b813581811115610b6f57610b6f610acf565b8060051b9150610b80848301610ae5565b8181529183018401918481019089841115610b9a57600080fd5b938501935b83851015610bb857843582529385019390850190610b9f565b8096505050505050509250929050565b60008060208385031215610bdb57600080fd5b823567ffffffffffffffff80821115610bf357600080fd5b818501915085601f830112610c0757600080fd5b813581811115610c1657600080fd5b866020828501011115610c2857600080fd5b60209290920196919550909350505050565b600067ffffffffffffffff831115610c5457610c54610acf565b610c67601f8401601f1916602001610ae5565b9050828152838383011115610c7b57600080fd5b828260208301376000602084830101529392505050565b600082601f830112610ca357600080fd5b610cb283833560208501610c3a565b9392505050565b600080600060608486031215610cce57600080fd5b833567ffffffffffffffff80821115610ce657600080fd5b610cf287838801610c92565b9450602086013591506001600160a01b0382168214610d1057600080fd5b90925060408501359080821115610d2657600080fd5b508401601f81018613610d3857600080fd5b610d4786823560208401610c3a565b9150509250925092565b600060208284031215610d6357600080fd5b813567ffffffffffffffff811115610d7a57600080fd5b610d8684828501610c92565b949350505050565b60005b83811015610da9578181015183820152602001610d91565b50506000910152565b82151581526040602082015260008251806040840152610dd9816060850160208701610d8e565b601f01601f1916919091016060019392505050565b600060208284031215610e0057600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015610e485783516001600160a01b031683529284019291840191600101610e23565b50909695505050505050565b600060208284031215610e6657600080fd5b5051919050565b818103818111156109cc57634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600082610ec157634e487b7160e01b600052601260045260246000fd5b500690565b60008251610ed8818460208701610d8e565b919091019291505056fea264697066735822122054eeef89b4975c5635df3c198c1fb6f23115adccb04266b0934c65cc2dbc4cb864736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c80634f480a2b1161008a57806391ad27b41161005957806391ad27b41461026d578063e55ae4e8146102a0578063efa1c482146102c0578063fd6673f5146102e257600080fd5b80634f480a2b146101e757806353a2c19a146102175780635f1b0fd81461022b5780636e04ff0d1461023f57600080fd5b80632cfcc539116100c65780632cfcc53914610178578063320229eb146101805780634585e33b14610195578063473f1ddc146101b557600080fd5b806309bc33a7146100ed578063115cbaf51461012f5780631fe543e314610156575b600080fd5b3480156100f957600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040519081526020015b60405180910390f35b34801561013b57600080fd5b50600154600160a01b900460ff166040516101269190610aa7565b34801561016257600080fd5b50610176610171366004610b16565b6102f7565b005b610176610384565b34801561018c57600080fd5b5060025461011c565b3480156101a157600080fd5b506101766101b0366004610bc8565b61046f565b3480156101c157600080fd5b506001546001600160a01b03165b6040516001600160a01b039091168152602001610126565b3480156101f357600080fd5b50610207610202366004610cb9565b610644565b6040519015158152602001610126565b34801561022357600080fd5b50600161011c565b34801561023757600080fd5b50600361011c565b34801561024b57600080fd5b5061025f61025a366004610d51565b610686565b604051610126929190610db2565b34801561027957600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061011c565b3480156102ac57600080fd5b506101cf6102bb366004610dee565b610716565b3480156102cc57600080fd5b506102d5610745565b6040516101269190610e07565b3480156102ee57600080fd5b5060005461011c565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103765760405163073e64fd60e21b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526044015b60405180910390fd5b61038082826107a7565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156103c55760405163066d781f60e01b815260040160405180910390fd5b600060018054600160a01b900460ff16908111156103e5576103e5610a91565b146104035760405163050955c760e21b815260040160405180910390fd5b600080546001810182558180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319163390811790915560405190917f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d491a2565b600061048960405180602001604052806000815250610686565b509050806104e35747600080549050600160149054906101000a900460ff1660018111156104b9576104b9610a91565b60405163275e187b60e21b815260048101939093526024830191909152604482015260640161036d565b60018054600160a01b60ff60a01b199091161781556040516305d3b1d360e41b81527f000000000000000000000000000000000000000000000000000000000000000060048201527f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff166024820152600360448201527f000000000000000000000000000000000000000000000000000000000000000063ffffffff16606482015260848101919091526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635d3b1d309060a4016020604051808303816000875af11580156105ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106109190610e54565b60405190915081907fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b90600090a250505050565b600080610650836108e7565b9050600061065d82610917565b9050600061066b8288610952565b6001600160a01b039081169087161493505050509392505050565b600060606000600160149054906101000a900460ff1660018111156106ad576106ad610a91565b600014905060007f0000000000000000000000000000000000000000000000000000000000000000600254426106e39190610e6d565b6000549110915015154715158380156106f95750825b80156107025750815b801561070b5750805b955050505050915091565b600080828154811061072a5761072a610e8e565b6000918252602090912001546001600160a01b031692915050565b6060600080548060200260200160405190810160405280929190818152602001828054801561079d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161077f575b5050505050905090565b600080548251839083906107bd576107bd610e8e565b60200260200101516107cf9190610ea4565b905060008082815481106107e5576107e5610e8e565b600091825260208083209190910154600180546001600160a81b0319166001600160a01b03909216918217905560408051848152928301908190529151909350610830929190610a17565b504260025560405147906000906001600160a01b0384169047908381818185875af1925050503d8060008114610882576040519150601f19603f3d011682016040523d82523d6000602084013e610887565b606091505b50509050806108a95760405163a1d04b3960e01b815260040160405180910390fd5b60405182906001600160a01b038516907f64791dbae5677392ba76761a5273633cec8f1d9d8cfe808da7bac6ef16a880be90600090a3505050505050565b6000816040516020016108fa9190610ec6565b604051602081830303815290604052805190602001209050919050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c016108fa565b600080600080610961856109d2565b6040805160008152602081018083528b905260ff8316918101919091526060810184905260808101839052929550909350915060019060a0016020604051602081039080840390855afa1580156109bc573d6000803e3d6000fd5b5050506020604051035193505050505b92915050565b600080600083516041146109f9576040516311ed343b60e31b815260040160405180910390fd5b50505060208101516040820151606090920151909260009190911a90565b828054828255906000526020600020908101928215610a6c579160200282015b82811115610a6c57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610a37565b50610a78929150610a7c565b5090565b5b80821115610a785760008155600101610a7d565b634e487b7160e01b600052602160045260246000fd5b6020810160028310610ac957634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610b0e57610b0e610acf565b604052919050565b60008060408385031215610b2957600080fd5b8235915060208084013567ffffffffffffffff80821115610b4957600080fd5b818601915086601f830112610b5d57600080fd5b813581811115610b6f57610b6f610acf565b8060051b9150610b80848301610ae5565b8181529183018401918481019089841115610b9a57600080fd5b938501935b83851015610bb857843582529385019390850190610b9f565b8096505050505050509250929050565b60008060208385031215610bdb57600080fd5b823567ffffffffffffffff80821115610bf357600080fd5b818501915085601f830112610c0757600080fd5b813581811115610c1657600080fd5b866020828501011115610c2857600080fd5b60209290920196919550909350505050565b600067ffffffffffffffff831115610c5457610c54610acf565b610c67601f8401601f1916602001610ae5565b9050828152838383011115610c7b57600080fd5b828260208301376000602084830101529392505050565b600082601f830112610ca357600080fd5b610cb283833560208501610c3a565b9392505050565b600080600060608486031215610cce57600080fd5b833567ffffffffffffffff80821115610ce657600080fd5b610cf287838801610c92565b9450602086013591506001600160a01b0382168214610d1057600080fd5b90925060408501359080821115610d2657600080fd5b508401601f81018613610d3857600080fd5b610d4786823560208401610c3a565b9150509250925092565b600060208284031215610d6357600080fd5b813567ffffffffffffffff811115610d7a57600080fd5b610d8684828501610c92565b949350505050565b60005b83811015610da9578181015183820152602001610d91565b50506000910152565b82151581526040602082015260008251806040840152610dd9816060850160208701610d8e565b601f01601f1916919091016060019392505050565b600060208284031215610e0057600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015610e485783516001600160a01b031683529284019291840191600101610e23565b50909695505050505050565b600060208284031215610e6657600080fd5b5051919050565b818103818111156109cc57634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600082610ec157634e487b7160e01b600052601260045260246000fd5b500690565b60008251610ed8818460208701610d8e565b919091019291505056fea264697066735822122054eeef89b4975c5635df3c198c1fb6f23115adccb04266b0934c65cc2dbc4cb864736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the funciton that the chainlink Keeper nodes call the ylook for the \"upkeepNeeded\" to return true. The following should b etrue in order to return true: 1. Our time interval should have passed 2. The lottery should have at least 1 player and have some Eth 3. Our subscription is funded with LINK 4. The lottery should be in an \"open\" State"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 209,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 226,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 229,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)204"
      },
      {
        "astId": 231,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)204": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
